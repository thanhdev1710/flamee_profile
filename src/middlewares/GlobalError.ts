import { NextFunction, Request, Response } from "express";
import AppError from "../utils/error/AppError";
import { env } from "../config/env";

// H√†m x·ª≠ l√Ω l·ªói trong m√¥i tr∆∞·ªùng production
const sendErrorProd = (err: AppError, res: Response) => {
  if (err.isOperational) {
    // N·∫øu l·ªói l√† l·ªói do ng∆∞·ªùi d√πng (v√≠ d·ª•: l·ªói validation)
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      errors: err.errors,
    });
  } else {
    // N·∫øu l·ªói l√† do h·ªá th·ªëng (v√≠ d·ª•: l·ªói server)
    console.error(`ERROR üí•:`, err); // Log chi ti·∫øt l·ªói
    return res.status(500).json({
      status: "error",
      message: "Something went very wrong!", // Th√¥ng b√°o l·ªói chung cho ng∆∞·ªùi d√πng
    });
  }
};

// H√†m x·ª≠ l√Ω l·ªói trong m√¥i tr∆∞·ªùng development
const sendErrorDev = (err: AppError, res: Response) => {
  return res.status(err.statusCode).json({
    status: err.status,
    error: err, // Log chi ti·∫øt l·ªói
    message: err.message, // Th√¥ng b√°o l·ªói
    stack: err.stack, // Log stack trace (d√†nh cho developer)
  });
};

// Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
export default function GlobalError(
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) {
  err.statusCode = err.statusCode || 500; // M·∫∑c ƒë·ªãnh m√£ l·ªói l√† 500 (server error) n·∫øu kh√¥ng c√≥ m√£ l·ªói
  err.status = err.status || "error"; // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i l√† "error" n·∫øu kh√¥ng c√≥

  // Ki·ªÉm tra m√¥i tr∆∞·ªùng ƒë·ªÉ x√°c ƒë·ªãnh c√°ch x·ª≠ l√Ω l·ªói
  if (env.nodeEnv === "development") {
    // N·∫øu l√† m√¥i tr∆∞·ªùng development, g·ª≠i chi ti·∫øt l·ªói cho client
    sendErrorDev(err, res);
  } else if (env.nodeEnv === "production") {
    // N·∫øu l√† m√¥i tr∆∞·ªùng production, ki·ªÉm tra l·ªói l√† ZodError hay kh√¥ng v√† g·ª≠i th√¥ng b√°o l·ªói ph√π h·ª£p
    let error = { ...err, message: err.message };

    sendErrorProd(error, res); // G·ª≠i l·ªói v·ªÅ client
  }
}
